import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "./Profile.module.css";
import { userInfo } from "os";
import * as React from "react";
import { signOut, useSession } from "next-auth/react";
import Link from "next/link";
import { useRouter } from "next/router";
import { Container, Card, Button, Grid, Text, Modal, useModal } from "@nextui-org/react";
import { PrismaClient } from "@prisma/client";
import "react-activity-feed/dist/index.css";
import { connect, EnrichedUser } from "getstream";
import {
  StreamApp,
  NotificationDropdown,
  FlatFeed,
  LikeButton,
  Activity,
  CommentList,
  CommentField,
  StatusUpdateForm,
  UserBar,
  FollowButton,
  DefaultUT,
  ActivityProps,
} from "react-activity-feed";
import stream from "getstream";
import NavBar from "../components/NavBar";
import { useState, useEffect } from "react";


const apiKey = process.env.NEXT_PUBLIC_STREAM_API_KEY as string;
const appId = process.env.NEXT_PUBLIC_STREAM_APP_ID as string;

const Profile: NextPage = (props) => {
  const [followingListState, setFollowingListState] = useState([])

  const stream = require('getstream');



  const session = useSession();
  // console.log('session',session.data?.user)
  // console.log("session", session.data?.user?.userToken);

  const userToken = session.data?.user?.userToken;
  const apiKey = process.env.NEXT_PUBLIC_STREAM_API_KEY as string;
  const appId = process.env.NEXT_PUBLIC_STREAM_APP_ID as string;
  const client = stream.connect(apiKey, userToken, appId);
  // loading activities and following stats from getStream.io
  useEffect(() => {
    // Activities()
    UserFollowing()
    // UserFollowers()
  }, []);

  const UserFollowing = () => {
    //got the current user info from getstream
    const userOne = client.feed('home', client.userId);
    userOne.following().then((res) => {

      let List = []
      for (let i = 0; i < res.results.length; i++) {
        const user = res.results[i].target_id.slice(5);
        List.push(user)
      }
      console.log('following list', List)

      setFollowingListState(List)

    }).catch((err) => {
      console.error(err)
    })
  }

  // function to follow a user from the main activity in middle of page
  const followerUser = (userToFollow) => {
    const userOne = client.feed('home', client.userId);
    userOne.follow('user', userToFollow)
    UserFollowing()
    // UserFollowers()
    // Activities()
  }

  const unfollowerUser = (userToUnFollow) => {
    const userOne = client.feed('home', client.userId);
    userOne.unfollow('user', userToUnFollow, { keepHistory: true })
    UserFollowing()
    // UserFollowers()
    // Activities()
  }

  const FollowingComponent = () => {
    const { setVisible, bindings } = useModal();

    return (

      <div>

        <Button auto shadow color="secondary" onClick={() => setVisible(true)}>
          Following  {followingListState.length}
        </Button>
        <Modal
          scroll
          width="600px"
          aria-labelledby="modal-title"
          aria-describedby="modal-description"
          {...bindings}
        >
          <Modal.Header>
            <Text id="modal-title" size={18}>
              Users you are Following
            </Text>
          </Modal.Header>
          <Modal.Body>
            <Grid >
              <Grid>
                <Grid >




                </Grid>
              </Grid>
              <Grid >
                {followingListState.slice(0, 10).map((follower) => (
                  <Grid >
                    <Container>
                      <Grid >
                        <Grid >
                          <UserBar
                            key={follower}
                            username={follower}
                            onClickUser={console.log}
                            avatar="https://i.pinimg.com/originals/4f/a1/41/4fa141173a1b04470bb2f850bc5da13b.png"

                            timestamp="2022-04-19T07:44:11+00:00"
                            subtitle="a user you're following"
                          />
                          <Button size='xs' onClick={() => unfollowerUser(follower)} >
                            unfollow?
                          </Button>

                        </Grid>

                      </Grid>
                    </Container>
                  </ Grid >
                ))}

              </Grid>
            </Grid>
          </Modal.Body>
          <Modal.Footer>
            <Button auto flat color="error" onClick={() => setVisible(false)}>
              Close
            </Button>

          </Modal.Footer>
        </Modal>


      </div>
    )

  }



  return (
    <>
      <div className={styles.container}>
        <Head>
          <title>Home for</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <NavBar />


        <main className={styles.main}>
          <h1 className={styles.title}>
            {" "}
            Profile of {session.data?.user?.name}{" "}
          </h1>
          <FollowingComponent />


          <StreamApp apiKey={apiKey} appId={appId} token={userToken}>
            <StatusUpdateForm />
            <FlatFeed
              notify
              feedGroup="user"
              Activity={(props) => {
                console.log("props", props)
                let activity
                if (props.activity?.actor?.data) {
                  activity = {
                    activity: {
                      //give
                      ...props.activity,
                      actor: {
                        data: {
                          name: props.activity.actor.id
                        }
                      }
                    }
                  } as ActivityProps
                }

                return (
                  <Activity
                    {...props}
                    // data={{ name: props.activity.actor.data.id }}
                    activity={activity?.activity || props.activity}
                    Footer={() => (
                      <div style={{ padding: "8px 16px" }}>
                        <LikeButton {...props} />
                        <CommentField
                          activity={props.activity}
                          onAddReaction={props.onAddReaction}
                        />
                        <CommentList activityId={props.activity.id} />
                      </div>
                    )}
                  />
                )
              }}
            />
          </StreamApp>

        </main>
      </div>
    </>
  );
};

export async function getServerSideProps() {



  // //make a feed for user, add activity to that feed
  // let Userfeed = client.feed('user', username);

  // Userfeed.addActivity({
  //   'actor': client.user(username).ref(),
  //   'verb': 'post',
  //   'object': 'I love this picture',
  //   'attachments': {
  //     'og': {
  //       'title': 'A kitten',
  //       'description': 'Download this photo in Italy by Lorenzo Spoleti',
  //       'url': 'http://placekitten.com/200/300',
  //       'images': [
  //         {
  //           'image': 'http://placekitten.com/200/300'
  //         }
  //       ]
  //     }
  //   }
  // })


  // create a follow button


  // let stream = require('getstream');

  // const client = stream.connect(apiKey, 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoia2F5YSJ9.yBStiSdcIHoZLy8DC8D5PnIPeRUofbUPbRe2YseM9BY', appId);


  // const userStreamToken = client.feed('user', 'devil', userToken);


  ''


  // For the feed group 'user' and user id 'eric' get the feed
  // The user token is generated server-side for this user
  // const alexFeed = client.feed('user', 'alex', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYWxleCJ9.Hwo1ZLYMkZjzEaRKy_KEEkJ5JUOOlgxSxuObxBF32uk');

  // Add the activity to the feed
  // alexFeed.addActivity({
  //   actor: 'SU:alex',
  //   verb: 'tweet',
  //   object: 'hello this is from ServerSideProps'
  // });


  //worked!
  // const lottieFlatFeed = client.feed('user', 'lottie', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoibG90dGllIn0.1GfqRl6bJFhK-oQdsbHM-GVBvDLhROxp0Gi1N1qLC40');
  // lottieFlatFeed.follow('user', 'alex');


  return {
    props: {},
  };
}

export default Profile;
